<?php

/**
 * @file
 * The main module file for the Islandora XACML Editor.
 */

use Drupal\Core\Form\FormStateInterface;

// Permission.
// @codingStandardsIgnoreLine
const ISLANDORA_XACML_EDITOR_ADMINISTER_INHERITANCE_PERMISSION = 'administer xacml inheritance';

/**
 * Implements hook_theme().
 */
function islandora_xacml_editor_theme($existing, $type, $theme, $path) {
  return [
    'islandora_xacml_editor_policy_management_table' => [
      'file' => 'includes/form.inc',
      'render element' => 'table',
      'function' => 'islandora_xacml_editor_policy_management_table',
    ],
  ];
}

/**
 * Function as to whether display the editor or not.
 *
 * @param AbstractObject $object
 *   A AbstractObject.
 *
 * @return bool
 *   TRUE if to show the tab, FALSE otherwise.
 */
function islandora_xacml_editor_access(AbstractObject $object) {
  return islandora_object_access('administer islandora_xacml_editor', $object);
}

/**
 * Implements hook_islandora_object_access().
 */
function islandora_xacml_editor_islandora_object_access($op, $object, $user) {
  if ($op == 'administer islandora_xacml_editor') {
    if (isset($object['POLICY'])) {
      return islandora_datastream_access(ISLANDORA_METADATA_EDIT, $object['POLICY'], $user);
    }
    else {
      return islandora_object_access(ISLANDORA_ADD_DS, $object, $user);
    }
  }

  return NULL;
}

/**
 * Implements hook_islandora_xacml_editor_child_query().
 */
// @codingStandardsIgnoreLine
function islandora_xacml_editor_islandora_collectionCModel_islandora_xacml_editor_child_query(AbstractObject $object) {
  $collection_query = <<<EOQ
select ?object from <#ri> WHERE
{
    {
      ?object <fedora-rels-ext:isMemberOfCollection> <info:fedora/{$object->id}>
    }
    UNION
    {
      ?object <fedora-rels-ext:isMemberOf> <info:fedora/{$object->id}>
    }
    ?object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>
}
EOQ;
  $results = $object->repository->ri->sparqlQuery($collection_query);

  if (count($results) > 0) {
    return [
      'all_children' => [
        'type' => 'sparql',
        'query' => $collection_query,
        'description' => t('All children of this collection and collections within this collection (existing and new).'),
      ],
    ];
  }
}

/**
 * Implements hook_islandora_ingest_steps().
 */
function islandora_xacml_editor_islandora_ingest_steps(FormStateInterface $form_state) {
  $shared_storage = islandora_ingest_form_get_shared_storage($form_state);
  if (empty($shared_storage['parent'])) {
    return;
  }
  $parent = $shared_storage['parent'];
  return [
    'islandora_xacml_policy' => [
      'type' => 'callback',
      'weight' => 8,
      'module' => 'islandora_xacml_editor',
      'do_function' => [
        'function' => 'islandora_xacml_editor_apply_policy',
        'args' => [$parent],
      ],
      'undo_function' => [
        'function' => 'islandora_xacml_editor_undo_policy',
        'args' => [],
      ],
    ],
  ];
}

/**
 * Applies the parent's POLICY datastream to the child if it exists.
 *
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   The passed through form_state from hook_islandora_ingest_steps().
 * @param string $parent
 *   PID of the parent object.
 */
function islandora_xacml_editor_apply_policy(FormStateInterface $form_state, $parent) {
  $parent_object = islandora_object_load($parent);
  if ((!$form_state->getValue('xacml') && $parent_object['POLICY']) ||
      ($parent_object['POLICY'] && $form_state->getValue('xacml') != 'None')) {
    foreach ($form_state['islandora']['objects'] as $object) {
      islandora_xacml_editor_apply_parent_policy($object, $parent_object);
    }
  }
}

/**
 * Deletes the POLICY datastream and relationships added through the apply.
 *
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   The passed through form_state from hook_islandora_ingest_steps().
 */
function islandora_xacml_editor_undo_policy(FormStateInterface $form_state) {
  foreach ($form_state['islandora']['objects'] as $object) {
    if (isset($object['POLICY'])) {
      $viewable_by_user = 'isViewableByUser';
      $viewable_by_role = 'isViewableByRole';
      $manageable_by_user = 'isManageableByUser';
      $manageable_by_role = 'isManageableByRole';
      $object->purgeDatastream('POLICY');
      $object->relationships->remove(ISLANDORA_RELS_EXT_URI, $viewable_by_user);
      $object->relationships->remove(ISLANDORA_RELS_EXT_URI, $viewable_by_role);
      $object->relationships->remove(ISLANDORA_RELS_EXT_URI, $manageable_by_user);
      $object->relationships->remove(ISLANDORA_RELS_EXT_URI, $manageable_by_role);

      foreach ($object as $dsid => $value) {
        $object[$dsid]->relationships->remove(ISLANDORA_RELS_INT_URI, $viewable_by_user);
        $object[$dsid]->relationships->remove(ISLANDORA_RELS_INT_URI, $viewable_by_role);
        $object[$dsid]->relationships->remove(ISLANDORA_RELS_INT_URI, $manageable_by_user);
        $object[$dsid]->relationships->remove(ISLANDORA_RELS_INT_URI, $manageable_by_role);
      }
    }
  }
}

/**
 * Implements islandora_basic_collection_build_manage_object().
 *
 * @param array $form_state
 *   The current Form being processed.
 * @param AbstractObject $object
 *   The Islandora Object being processed.
 *
 * @return array
 *   The current Form State with manage_xacml element appended.
 */
function islandora_xacml_editor_islandora_basic_collection_build_manage_object(array $form_state, AbstractObject $object) {
  $form_state['manage_collection_object']['manage_xacml'] = [
    '#id' => 'manage-xacml',
    '#group' => 'manage_xacml_object',
    '#access' => \Drupal::currentUser()->hasPermission(ISLANDORA_XACML_EDITOR_ADMINISTER_INHERITANCE_PERMISSION),
    '#type' => 'details',
    '#open' => TRUE,
    '#title' => t('Manage XACML Inheritance'),
    'form' => \Drupal::formBuilder()->getForm('Drupal\islandora_xacml_editor\Form\ManageXacml', $object),
  ];
  $form_state['manage_collection_object']['manage_xacml']['form']['#submit'][] = 'islandora_xacml_editor_manage_xacml_form_submit';
  return $form_state;
}

/**
 * Form alter the child collection form.
 *
 * @param array $form
 *   The form being passed from the hook.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   The current Form State being processed.
 */
function islandora_xacml_editor_form_islandora_basic_collection_create_child_collection_form_alter(array &$form, FormStateInterface $form_state) {
  $parent_object = islandora_object_load($form_state['islandora']['shared_storage']['parent']);

  $xacml_options = ['None' => 'None'];

  // If the form has a step_storage value set for this field, use it.
  $step_storage = &islandora_ingest_form_get_step_storage($form_state, 'islandora_basic_collection');
  $xacml_selected_option = isset($step_storage['values']['xacml']) ? [$step_storage['values']['xacml'] => $step_storage['values']['xacml']] : ['None' => 'None'];

  if ($parent_object) {
    $xacml_options[$parent_object->id] = $parent_object->label;
  }

  $form['xacml'] = [
    '#type' => 'select',
    '#title' => t('Inherit XACML policy from'),
    '#options' => $xacml_options,
    '#default_value' => $xacml_selected_option,
  ];

  // Using after_build to alter the weight dynamically.
  $form['#after_build'][] = 'islandora_xacml_editor_after_build';
}

/**
 * Dynamically adjust form element weights in after_build.
 *
 * @param array $form
 *   The form that has been rendered.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   The active form's form state.
 *
 * @return array
 *   The form after POST processing is complete.
 */
function islandora_xacml_editor_after_build(array $form, FormStateInterface $form_state) {
  $weight = $form['next']['#weight'] - .001;
  if (isset($form['prev'])) {
    $weight = min($weight, $form['prev']['#weight'] - .001);
  }
  $form['xacml']['#weight'] = $weight;
  unset($form['#sorted']);
  return $form;
}

/**
 * Applies the parent's POLICY datastream to the child if it exists.
 *
 * @param AbstractObject $child
 *   The object to add the POLICY to.
 * @param AbstractObject $parent
 *   The object to take the POLICY from.
 */
function islandora_xacml_editor_apply_parent_policy(AbstractObject $child, AbstractObject $parent) {
  if (isset($parent['POLICY'])) {
    // Need to update the RELS-EXT to indicate which parent this policy is
    // inherited from.
    $child->relationships->add(ISLANDORA_RELS_EXT_URI, 'inheritXacmlFrom', $parent->id, RELS_TYPE_URI);
  }
}
